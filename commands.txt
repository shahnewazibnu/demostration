Working with local repositories
#git init-This command turns a directory into an empty Git repository.  This is the first step in creating a repository.
#git add-Adds files in the to the staging area for Git. Before a file is available to commit to a repository, the file needs to be added to the Git index (staging area).
#git add . - Adds all the file in the local repository.
#git status - This command returns the current state of the repository.
#git commit -Record the changes made to the files to a local repository. For easy reference, each commit has a unique ID.
It’s best practice to include a message with each commit explaining the changes made in a commit. Adding a commit message helps to find a particular change or understanding the changes.
this command will take to the VIM editor. press 'i' to edit and add the message about the changes hat were made. press "escape' then ":wq" to get back to the previous menu.
#git commit -m 'message about the changes' - (shortcut of the previous job)
#git config -With Git, there are many configurations and settings possible. git config is how to assign these settings. 
Two important settings are user user.name and user.email. 
These values set what email address and name commits will be from on a local computer.
#git config --global user.name 'xyz'
#git config --global user.email 'xyz@gmail.com'
#git branch - To determine what branch the local repository is on, add a new branch, or delete a branch.
#git branch <branch_name> - create a branch
#git branch -a - list all remote or local branches
#git branch -d <branch_name> - delete a branch
#git checkout <branch_name> -To start working in a different branch, use git checkout to switch branches.
#git merge <branch_name> - Integrate branches together. git merge combines the changes from one branch to another branch. For example, merge the changes made in a staging branch into the stable branch.

Working with remote repositories
#git remote - To connect a local repository with a remote repository. A remote repository can have a name set to avoid having to remember the URL of the repository.
#git remote <command> <remote-name> <remote_URL> 
example ( git remote add origin https://github.com/shahnewazibnu/demostration.git)
#git push - Sends local commits to the remote repository. git push requires two parameters: the remote repository and the branch that the push is for.
#git push <remote_URL/remote_name> <branch>
example (git push origin master ) (git push -u origin master)
#git push —all - Push all local branches to remote repository
#git pull - To get the latest version of a repository run git pull. This pulls the changes from the remote repository to the local computer.
#git pull <branch_name> <remote_URL/remote_name>
#git clone - To create a local working copy of an existing remote repository, use git clone to copy and download the repository to a computer. Cloning is the equivalent of git init when working with a remote repository. Git will create a directory locally with all files and repository history.
#git clone <remote_URL>

